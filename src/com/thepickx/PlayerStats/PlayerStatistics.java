package com.thepickx.PlayerStats;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.Statistic;
import org.bukkit.entity.Player;

import com.bgsoftware.superiorskyblock.api.SuperiorSkyblockAPI;
import com.bgsoftware.superiorskyblock.api.island.Island;
import com.moneybags.tempfly.time.TimeHandle;

import me.swanis.mobcoins.MobCoinsAPI;
import sv.file14.procosmetics.api.API;

/*
 * Example code on how I would do it.
 * NOTE: This is using lombok to make the development easier.
 */

/* Using a final class so no other classes can extend this class. */
public final class PlayerStatistics {

	/* The player we are creating an object for in UUID from. */
	private UUID playerUUID;
	/* Get the player from the UUID seeing how it will be used quite a bit. */
	/*
	 * Will return the players name using the getter that is generated by lombok
	 * using the @Data annotation.
	 */

	/**
	 * The players uuid.
	 *
	 * @param playerUUID
	 */
	public PlayerStatistics(UUID playerUUID) {
		this.playerUUID = playerUUID;
	}

	protected Player player = Bukkit.getPlayer(playerUUID);

	// ------------------------------------------------------------------------------
	// Island Information and Statistics.
	// ------------------------------------------------------------------------------

	/**
	 * Get the island level from the players island.
	 *
	 * @return
	 */
	public BigDecimal getIslandLevel() {
		return SuperiorSkyblockAPI.getPlayer(player).getIsland().getWorth();
	}

	/**
	 * Returns the island owner as a string.
	 *
	 * @return
	 */
	public String getIslandLeader() {
		return SuperiorSkyblockAPI.getPlayer(player).getIslandLeader().getName();
	}

	/**
	 * Will return if the player has a island.
	 *
	 * @return
	 */
	public Island hasIsland() {
		return SuperiorSkyblockAPI.getPlayer(player).getIsland();
	}

	// ------------------------------------------------------------------------------
	// Player Information and Statistics.
	// ------------------------------------------------------------------------------

	/**
	 * Get the players display name.
	 *
	 * @return Players display name as a string.
	 */
	public String getDisplayName() {
		return player.getDisplayName();
	}

	/**
	 * Get the players balance un formatted.
	 *
	 * @return Players balance as a double.
	 */
	public double getBalance() {
		return 1000000;
	}

	/**
	 * Get the players balance formatted with the DecimalFormat.
	 *
	 * @return Players balance formatted as a String.
	 */
	public String getBalanceFormatted() {
		DecimalFormat decimalFormat = new DecimalFormat("#,###.00");
		return decimalFormat.format(getBalance());
	}

	/**
	 * Will return the player mob coin balance.
	 *
	 * @return
	 */
	public int getMobcoinBalance() {
		return MobCoinsAPI.getProfileManager().getProfile(playerUUID).getMobCoins();
	}

	/**
	 * Will return the total player kills.
	 *
	 * @return The amount of player killed.
	 */
	public int getKillTotal() {
		return player.getStatistic(Statistic.PLAYER_KILLS);
	}

	/**
	 * Will return the amount of time a player has died.
	 *
	 * @return
	 */
	public int getDeathTotal() {
		return player.getStatistic(Statistic.DEATHS);
	}

	/**
	 * Will return the players total time played.
	 *
	 * @return
	 */
	public int getTimePlayed() {
		return player.getStatistic(Statistic.PLAY_ONE_MINUTE) / 20;
	}

	/**
	 * Will return the kill death ratio of the player.
	 *
	 * @return
	 */
	public float getKillDeathRatio() {
		return (getKillTotal() / getDeathTotal());
	}

	/**
	 * Will return the amount of time a player has flown.
	 * 
	 * @return
	 */
	public int getFlightTime() {
		return (int) TimeHandle.getTime(playerUUID);

	}

	/**
	 * Will return the players total experience.
	 *
	 * @return
	 */
	public float getExperience() {
		return player.getTotalExperience();
	}

	public int getCosmeticToken() {
		return API.getCoins(player);
	}

	public int Fly_in_Second() {
		return this.getFlightTime() % 60;
	}

	public int hourComponent() {
		return this.getFlightTime() / 60;
	}

	public int Fly_in_Minutes() {
		return this.hourComponent() % 60;
	}

	public int Fly_in_Hour() {
		return this.hourComponent() / 60;
	}

	public int Playtime_in_Second() {
		return this.getTimePlayed() % 60;
	}

	public int playhourComponent() {
		return this.getTimePlayed() / 60;
	}

	public int Playtime_in_Minutes() {
		return this.playhourComponent() % 60;
	}

	public int Playtime_in_Hour() {
		return this.playhourComponent() / 60;
	}

}